// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    password      String?
    accounts      Account[]
    sessions      Session[]
    UserRole      UserRole[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Function {
    id           String         @id
    name         String
    description  String?        @db.Text
    FunctionRisk FunctionRisk[]

    @@index([name], name: "name")
}

model Risk {
    id           String         @id
    name         String
    description  String?        @db.Text
    event_type   String
    owner        String
    FunctionRisk FunctionRisk[]
    RiskControl  RiskControl[]

    @@index([name], name: "name")
}

model Control {
    id          String        @id
    name        String
    description String?       @db.Text
    RiskControl RiskControl[]
    ControlRACI ControlRACI[]
    Assertion   Assertion[]
    ControlCoso ControlCoso[]

    @@index([name], name: "name")
}

model FunctionRisk {
    function_id String
    risk_id     String
    function    Function @relation(fields: [function_id], references: [id], onDelete: Cascade)
    risk        Risk     @relation(fields: [risk_id], references: [id], onDelete: Cascade)
    created_at  DateTime @default(now())

    @@id([function_id, risk_id])
}

model RiskControl {
    risk_id    String
    control_id String
    risk       Risk     @relation(fields: [risk_id], references: [id], onDelete: Cascade)
    control    Control  @relation(fields: [control_id], references: [id], onDelete: Cascade)
    created_at DateTime @default(now())

    @@id([risk_id, control_id])
}

enum ControlAssertionAccountType {
    Income_Statement
    Balance_Sheet
    Cash_Flow_Statement
    Other
}

model Assertion {
    id           String
    control_id   String
    name         String
    completeness Boolean?
    existence    Boolean?
    accuracy     Boolean?
    valuation    Boolean?
    obligation   Boolean?
    presentation Boolean?
    account_type ControlAssertionAccountType @default(Balance_Sheet)
    Control      Control                     @relation(fields: [control_id], references: [id], onDelete: Cascade)

    @@id([id, control_id])
}

model ControlRACI {
    id             String  @id @default(cuid())
    control_id     String
    control        Control @relation(fields: [control_id], references: [id], onDelete: Cascade)
    responsability String?
    accountability String?
    consulted      String?
    informed       String?
}

model ControlCoso {
    id           String         @id @default(cuid())
    control_id   String
    control      Control        @relation(fields: [control_id], references: [id], onDelete: Cascade)
    component_id String
    component    CosoComponents @relation(fields: [component_id], references: [id], onDelete: Cascade)
}

model CosoComponents {
    id             String           @id
    CosoPrinciples CosoPrinciples[]
    ControlCoso    ControlCoso[]
}

model CosoPrinciples {
    id              String            @id
    component_id    String
    component       CosoComponents    @relation(fields: [component_id], references: [id], onDelete: Cascade)
    CosoFocusPoints CosoFocusPoints[]
}

model CosoFocusPoints {
    id           String         @id
    principle_id String
    principle    CosoPrinciples @relation(fields: [principle_id], references: [id], onDelete: Cascade)
}

// enum RiskType {
//     Strategic_Risk
//     Operational_Risk
//     Financial_Risk
//     Compliance_Risk
//     Reputational_Risk
// }

// model RiskRootCause {
//     id     String  @id
//     name   String
//     Risk   Risk?   @relation(fields: [riskId], references: [id])
//     riskId String?
// }

// model RiskPreEventMitigations {
//     id     String  @id
//     name   String
//     Risk   Risk?   @relation(fields: [riskId], references: [id])
//     riskId String?
// }

// model RiskPostEventMitigations {
//     id     String  @id
//     name   String
//     Risk   Risk?   @relation(fields: [riskId], references: [id])
//     riskId String?
// }

// model RiskConsequences {
//     id     String  @id
//     name   String
//     Risk   Risk?   @relation(fields: [riskId], references: [id])
//     riskId String?
// }

// model RiskCategory {
//     id     String  @id
//     name   String
//     Risk   Risk?   @relation(fields: [riskId], references: [id])
//     riskId String?
// }

// model Risk {
//     id                       String                     @id
//     name                     String
//     description              String?                    @db.Text
//     processId                String
//     process                  Process                    @relation(fields: [processId], references: [id])
//     controls                 Control[]
//     riskType                 RiskType?
//     riskAppetite             Int?
//     riskTolerance            Int?
//     rootCauses               RiskRootCause[]
//     RiskPreEventMitigations  RiskPreEventMitigations[]
//     RiskPostEventMitigations RiskPostEventMitigations[]
//     RiskConsequences         RiskConsequences[]
//     riskEvent                String?                    @db.Text
//     categories               RiskCategory[]
//     inherentAssessment       InherentRiskAssessment?    @relation(fields: [inherentAssessmentId], references: [id])
//     inherentAssessmentId     String?
//     residualAssessment       ResidualRiskAssessment?    @relation(fields: [residualAssessmentId], references: [id])
//     residualAssessmentId     String?
// }

// model InherentRiskAssessment {
//     id          String   @id
//     name        String
//     description String?  @db.Text
//     impact      Int?
//     likelihood  Int?
//     created_at  DateTime @default(now())
//     Risk        Risk[]
// }

// model ResidualRiskAssessment {
//     id          String   @id
//     name        String
//     description String?  @db.Text
//     impact      Int?
//     likelihood  Int?
//     created_at  DateTime @default(now())
//     Risk        Risk[]
// }

// model CosoComponents {
//     id          String  @id
//     name        String
//     description String? @db.Text
//     Coso        Coso[]
// }

// model CosoPrinciples {
//     id          String  @id
//     name        String
//     description String? @db.Text
//     Coso        Coso[]
// }

// model CosoFocusPoints {
//     id   String @id
//     name String

//     Coso   Coso?   @relation(fields: [cosoId], references: [id])
//     cosoId String?
// }

// model Coso {
//     id              String            @id
//     name            String
//     component       CosoComponents    @relation(fields: [componentId], references: [id])
//     componentId     String
//     principle       CosoPrinciples    @relation(fields: [principleId], references: [id])
//     principleId     String
//     Control         Control[]
//     CosoFocusPoints CosoFocusPoints[]
// }

// model CobitProcess {
//     id    String  @id
//     name  String
//     Cobit Cobit[]
// }

// model RACIResponsibility {
//     id   String @id
//     name String
//     RACI RACI[]
// }

// model RACIAccountability {
//     id   String @id
//     name String
//     RACI RACI[]
// }

// model RACIConsultation {
//     id   String @id
//     name String
//     RACI RACI[]
// }

// model RACIInformed {
//     id   String @id
//     name String
//     RACI RACI[]
// }

// model Cobit {
//     id             String       @id
//     name           String
//     domain         CobitDomain  @relation(fields: [cobitDomainId], references: [id])
//     processes      CobitProcess @relation(fields: [cobitProcessId], references: [id])
//     cobitDomainId  String
//     cobitProcessId String
//     Control        Control[]

//     @@unique([cobitDomainId, cobitProcessId])
// }

// model RACI {
//     id               String             @id
//     name             String
//     responsibility   RACIResponsibility @relation(fields: [responsibilityId], references: [id])
//     accountability   RACIAccountability @relation(fields: [accountabilityId], references: [id])
//     consultation     RACIConsultation   @relation(fields: [consultationId], references: [id])
//     informed         RACIInformed       @relation(fields: [informedId], references: [id])
//     responsibilityId String
//     accountabilityId String
//     consultationId   String
//     informedId       String
//     Control          Control[]

//     @@unique([responsibilityId, accountabilityId, consultationId, informedId])
// }

// model Control {
//     id          String  @id
//     name        String
//     description String? @db.Text
//     riskId      String
//     cosoId      String?
//     cobitId     String?
//     raciId      String?
//     risk        Risk    @relation(fields: [riskId], references: [id])
//     coso        Coso?   @relation(fields: [cosoId], references: [id])
//     cobit       Cobit?  @relation(fields: [cobitId], references: [id])
//     raci        RACI?   @relation(fields: [raciId], references: [id])
// }

model Role {
    id             String           @id
    name           String
    description    String?
    RolePermission RolePermission[]
    UserRole       UserRole[]
}

model Permission {
    id             String           @id
    name           String           @unique
    model          String
    RolePermission RolePermission[]
}

model RolePermission {
    id           String     @id
    roleId       String
    permissionId String
    role         Role       @relation(fields: [roleId], references: [id])
    permission   Permission @relation(fields: [permissionId], references: [id])
}

model UserRole {
    id     String @id
    userId String
    roleId String
    user   User   @relation(fields: [userId], references: [id])
    role   Role   @relation(fields: [roleId], references: [id])

    @@unique([userId, roleId])
}
