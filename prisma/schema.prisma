// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    password      String?
    accounts      Account[]
    sessions      Session[]
    UserRole      UserRole[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Function {
    id           String         @id
    name         String
    description  String?        @db.Text
    FunctionRisk FunctionRisk[]

    @@index([name], name: "name")
}

model Risk {
    id                 String         @id
    name               String
    description        String?        @db.Text
    event_type         String?
    owner              String?
    riskType           RiskType?
    FunctionRisk       FunctionRisk[]
    RiskControl        RiskControl[]
    inherentImpact     Int?
    inherentLikelyhood Int?

    @@index([name], name: "name")
}

model Control {
    id          String        @id
    name        String
    description String?       @db.Text
    RiskControl RiskControl[]
    ControlRACI ControlRACI[]
    Assertion   Assertion[]
    ControlCoso ControlCoso[]

    @@index([name], name: "name")
}

model FunctionRisk {
    function_id String
    risk_id     String
    function    Function @relation(fields: [function_id], references: [id], onDelete: Cascade)
    risk        Risk     @relation(fields: [risk_id], references: [id], onDelete: Cascade)
    created_at  DateTime @default(now())

    @@id([function_id, risk_id])
}

model RiskControl {
    risk_id    String
    control_id String
    risk       Risk     @relation(fields: [risk_id], references: [id], onDelete: Cascade)
    control    Control  @relation(fields: [control_id], references: [id], onDelete: Cascade)
    created_at DateTime @default(now())

    @@id([risk_id, control_id])
}

enum ControlAssertionAccountType {
    Income_Statement
    Balance_Sheet
    Cash_Flow_Statement
    Other
}

model Assertion {
    id           String
    control_id   String
    name         String
    completeness Boolean?
    existence    Boolean?
    accuracy     Boolean?
    valuation    Boolean?
    obligation   Boolean?
    presentation Boolean?
    account_type ControlAssertionAccountType @default(Balance_Sheet)
    Control      Control                     @relation(fields: [control_id], references: [id], onDelete: Cascade)

    @@id([id, control_id])
}

model ControlRACI {
    id             String  @id @default(cuid())
    control_id     String
    control        Control @relation(fields: [control_id], references: [id], onDelete: Cascade)
    responsability String?
    accountability String?
    consulted      String?
    informed       String?
}

model ControlCoso {
    id           String         @id @default(cuid())
    control_id   String
    control      Control        @relation(fields: [control_id], references: [id], onDelete: Cascade)
    component_id String
    component    CosoComponents @relation(fields: [component_id], references: [id], onDelete: Cascade)
}

model CosoComponents {
    id             String           @id
    CosoPrinciples CosoPrinciples[]
    ControlCoso    ControlCoso[]
}

model CosoPrinciples {
    id              String            @id
    component_id    String
    component       CosoComponents    @relation(fields: [component_id], references: [id], onDelete: Cascade)
    CosoFocusPoints CosoFocusPoints[]
}

model CosoFocusPoints {
    id           String         @id
    principle_id String
    principle    CosoPrinciples @relation(fields: [principle_id], references: [id], onDelete: Cascade)
}

enum RiskType {
    Strategic_Risk
    Operational_Risk
    Financial_Risk
    Compliance_Risk
    Reputational_Risk
}

model Role {
    id             String           @id
    name           String
    description    String?
    RolePermission RolePermission[]
    UserRole       UserRole[]
}

model Permission {
    id             String           @id
    name           String           @unique
    model          String
    RolePermission RolePermission[]
}

model RolePermission {
    id           String     @id
    roleId       String
    permissionId String
    role         Role       @relation(fields: [roleId], references: [id])
    permission   Permission @relation(fields: [permissionId], references: [id])
}

model UserRole {
    id     String @id
    userId String
    roleId String
    user   User   @relation(fields: [userId], references: [id])
    role   Role   @relation(fields: [roleId], references: [id])

    @@unique([userId, roleId])
}

model Process {
    id          String  @id
    name        String
    description String? @db.Text
}
