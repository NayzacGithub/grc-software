// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Process {
    id          String  @id
    name        String
    description String? @db.Text
    risks       Risk[]
}

enum RiskType {
    Strategic_Risk
    Operational_Risk
    Financial_Risk
    Compliance_Risk
    Reputational_Risk
}

model RiskRootCause {
    id     String  @id
    name   String
    Risk   Risk?   @relation(fields: [riskId], references: [id])
    riskId String?
}

model RiskPreEventMitigations {
    id     String  @id
    name   String
    Risk   Risk?   @relation(fields: [riskId], references: [id])
    riskId String?
}

model RiskPostEventMitigations {
    id     String  @id
    name   String
    Risk   Risk?   @relation(fields: [riskId], references: [id])
    riskId String?
}

model RiskConsequences {
    id     String  @id
    name   String
    Risk   Risk?   @relation(fields: [riskId], references: [id])
    riskId String?
}

model Risk {
    id                       String                     @id
    name                     String
    description              String?                    @db.Text
    processId                String
    process                  Process                    @relation(fields: [processId], references: [id])
    controls                 Control[]
    riskType                 RiskType?
    inherentRisk             Float?
    residualRisk             Float?
    riskVelocity             Int?
    likelihood               Int?
    impact                   Int?
    riskAppetite             Int?
    riskTolerance            Int?
    rootCauses               RiskRootCause[]
    RiskPreEventMitigations  RiskPreEventMitigations[]
    RiskPostEventMitigations RiskPostEventMitigations[]
    RiskConsequences         RiskConsequences[]
    riskEvent                String?                    @db.Text
}

model Control {
    id          String  @id
    name        String
    description String? @db.Text
    riskId      String
    risk        Risk    @relation(fields: [riskId], references: [id])
}
